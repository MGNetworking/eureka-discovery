@Library('JenkinsLib_Shared') _

// Configurations des serveurs
def remote

pipeline {
    agent any

    environment {

        DOMAIN_REGISTRY = "sonatype-nexus.backhole.ovh"
        DEPLOY = false
        ROLLBACK = false
        PATH_HOME_SERVER = ""
        SERVICE_CONFIG_URI = ""
        IMAGE_TAG = ""
        // Get credentials to connection serveur
        prod_CREDS = credentials('PROD')

    }

    stages {

        stage('Load Environment Variables') {
            steps {
                script {
                    echo "L'espace de travail : ${WORKSPACE}";

                    // lecture du fichier
                    def envContent = readFile(".env").trim()

                    // Séparer le contenu en lignes et traiter chaque ligne
                    envContent.readLines().each { line ->
                        // Diviser la ligne en clé et valeur
                        def (key, value) = line.split('=').collect { it.trim() }

                        // Définir la variable d'environnement dans le contexte du pipeline
                        env."${key.trim()}" = value.trim()
                    }

                    // Afficher les variables d'environnement pour le débogage
                    env.each { key, value ->
                        echo "${key}=${value}"
                    }

                    env.BRANCH_NAME = "prod"
                    echo("Branche en cour $env.BRANCH_NAME ")

                    remote = configurerServeur.config("${env.BRANCH_NAME}", '192.168.1.93', true)
                    remote.user = env.prod_CREDS_USR
                    remote.password = env.prod_CREDS_PSW
                    SERVICE_CONFIG_URI = "http://${remote.host}:8089"
                    // le path du dossier vers le serveur distant
                    PATH_HOME_SERVER = "/home/max/docker_home"

                    echo "Nouvelle version de l'application : ${IMAGE_VERSION}";
                }
            }
        }

        stage("Open connection") {
            steps {
                script {

                    echo("Ouverture de connection au depot nexus sur le serveur Preprod")
                    withCredentials([usernamePassword(credentialsId: 'nexus-credentials', passwordVariable: 'PASSWORD', usernameVariable: 'USERNAME')]) {

                        String loginResult = sshCommand remote: remote, failOnError: false, sudo: false,
                                command: "docker login -u ${USERNAME} -p ${PASSWORD} ${DOMAIN_REGISTRY}"

                        loginResult.contains("status: 401 Unauthorized") ? error("Erreur de connection status: 401 Unauthorized") :
                                echo("Connection au dépôt depuis le serveur réussi : Login Succeeded")
                    }

                    echo("Mise à jours du projet ms-eureka sur le serveur prod")
                    String commande = sshCommand remote: remote, failOnError: false, sudo: false,
                            command: "cd ${PATH_HOME_SERVER}/ms-eureka && git checkout main &&  git pull origin main"

                    echo("sorti : $commande")
                }
            }
        }

        // Détermine Update ou deploy
        stage("Status stack : eureka") {
            steps {
                script {
                    echo("Vérifi si la stack ${NAME_SERVICE} est créer ")
                    String result = ""
                    try {
                        result = sshCommand remote: remote, failOnError: false, sudo: false,
                                command: "docker stack ls | grep ${NAME_SERVICE}"

                        result.contains($NAME_SERVICE) ? DEPLOY = true : false
                        echo "La stack ${NAME_SERVICE} est " + (DEPLOY ? "déployée" : "non déployée") + " sur le serveur"
                    } catch (Exception e) {
                        echo("La Stack ${NAME_SERVICE} n'a pas etait trouver !!!")
                    }

                }
            }
        }


        stage("Maven Compilation") {
            agent {
                docker {
                    image 'maven:3.8.5-jdk-8-slim'
                    args '-v /var/jenkins_home/maven/.m2:/root/.m2' +
                            ' -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                script {
                    echo("Compilation du projet ms-configuration")
                    sh("mvn clean package -Dspring.profiles.active=${env.BRANCH_NAME} -DSERVICE_CONFIG_DOCKER=${SERVICE_CONFIG_URI}")
                }
            }
        }

        stage('Build Docker compose') {
            agent any
            steps {
                script {
                    echo("Création de l'image Docker : ${env.DOCKER_IMAGE_NAME}:${env.IMAGE_VERSION} ")
                    sh("docker compose build --no-cache")
                }
            }
        }

        stage('Push image dépôt') {
            agent any
            steps {
                script {
                    IMAGE_TAG = "${env.DOCKER_IMAGE_NAME}-prod:${env.IMAGE_VERSION}"
                    echo("tag de l'image : $IMAGE_TAG")
                    sh("docker tag ${env.DOCKER_IMAGE_NAME}:${env.IMAGE_VERSION} ${IMAGE_TAG}")

                    echo("push de l'image ${IMAGE_TAG} vers le dépôt")
                    def pushResult = docker.image("${IMAGE_TAG}").push()
                    echo("Sorti push : ${pushResult}")
                }
            }
        }


        stage('Deploy ms-eureka') {
            agent any
            when {
                expression { return env.DEPLOY }
            }
            steps {
                script {
                    if (IMAGE_TAG != "") {

                        // pull depuis preprod
                        String pullResult = sshCommand remote: remote, command: "docker pull ${IMAGE_TAG}"
                        echo("Sorti pull : ${pullResult}")

                        pullResult.contains("Status: Downloaded newer image") ?
                                echo("Le pull de l'image sur le serveur prod a été réalisé avec succès.") :
                                error("Erreur lors du pull de l'image.")
                        try {
                            def deployResult = sshCommand remote: remote, failOnError: false, sudo: false,
                                    command: "cd ${PATH_HOME_SERVER}/ms-eureka && export \$(cat .env) && " +
                                            "docker stack deploy -c ./docker-compose-swarm-prod.yml ${env.STACK_NAME}"

                            echo("Sorti deployResult : ${deployResult}")

                            if (deployResult == "Creating service ${NAME_SERVICE}") {
                                echo("Le déployement à été réaliser avec succès : ${deployResult}")
                            } else {
                                error("Echeck du déployment de l'images : ${NAME_SERVICE}")
                            }

                        } catch (Exception e) {
                            e.printStackTrace()
                            error("Une erreur est survenu pendant le deployment")
                        }
                    } else {
                        error("L'image tag n'est pas présent !!!")
                    }
                }

            }
        }

        stage('Update ms-eureka') {
            agent any
            when {
                expression { return !env.DEPLOY }
            }
            steps {
                script {
                    // Pull image in preprod and update with image
                    def deployResult = sshCommand remote: remote, failOnError: false, sudo: false,
                            command: "docker pull ${IMAGE_TAG} && docker service update --image ${IMAGE_TAG}"
                    env.ROLLBACK = true
                }
            }
        }

        // Teste la santer du service (dans la stack)
        stage('Test du service ') {
            agent any
            steps {
                script {

                    for (int index = 0; index < 10; index++) {

                        echo("Requet CURL n° $index du service : ${NAME_SERVICE} a l'adresse : http://${remote.host}:${PORT}/actuator/health")
                        def result = sh(script: "curl -s http://${remote.host}:${PORT}/actuator/health", returnStatus: true)

                        echo("result ${result}")

                        if (result == 0) {
                            echo("La mise en service de ${NAME_SERVICE} à été réalisé avec Succès ")
                            currentResult = "SUCCESS"
                            break
                        } else {
                            echo "Le service n'est pas encore UP. Attente de 15 secondes..."
                            echo "Tentative n° $index"
                            sleep time: 15, unit: 'SECONDS'
                        }
                    }
                    if (currentResult != "SUCCESS") {
                        error("Le service ${NAME_SERVICE} est en echec !!!")
                    }
                }
            }
        }
    }


    post {
        always {
            script {
                echo("Logout du depot sur prod ...")
                String loginResult = sshCommand remote: remote, command: "docker logout ${DOMAIN_REGISTRY}"
                if (loginResult.contains("Removing login credentials")) {
                    echo "La deconnection au dépôt depuis le serveur réussi"
                } else {
                    error("Echec de la deconnexion au dépot depuis le serveur Preprod")
                }

            }
        }
        success {

            script {
                echo "Fin " + (env.DEPLOY ? "du déployement de la stack " : "de la mise à jour de la stack ")
            }


        }
        failure {
            script {

                echo("Échec du build ");

                // Si update effectuer
                if (env.ROLLBACK) {
                    echo("ROLLBACK ...");
                    String rollbackResult = sshCommand remote: remote, command: "docker service rollback ${NAME_SERVICE}"
                    echo("Sorti ROLLBACK : ${rollbackResult}")

                    echo("Delete Images ${env.IMAGE_TAG} du serveur")
                    sh("docker rmi ${env.IMAGE_TAG}")
                }else {
                    echo("Delete Images ${env.IMAGE_TAG} du serveur")
                    sh("docker rmi ${env.IMAGE_TAG}")
                    echo("Delete stack")
                    sh("docker stack rm ${env.STACK_NAME}")
                }

            }
        }
    }
}