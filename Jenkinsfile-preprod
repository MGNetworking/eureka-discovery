@Library('JenkinsLib_Shared') _

// Configurations des serveurs
def remote
def nexus
def dockers
def STATUS_STACK


pipeline {
    agent any

    environment {
        SERVICE_CONFIG_URI = ""
        // Get credentials to connection serveur
        Preprod_CREDS = credentials('PREPROD')
        Nexus_CREDS = credentials('nexus-credentials')

    }

    stages {

        stage('Load Environment Variables') {
            steps {
                script {
                    echo "L'espace de travail : ${WORKSPACE}";

                    // lecture du fichier
                    def envContent = readFile(".env").trim()

                    // Séparer le contenu en lignes et traiter chaque ligne
                    envContent.readLines().each { line ->
                        // Diviser la ligne en clé et valeur
                        def (key, value) = line.split('=').collect { it.trim() }

                        // Définir la variable d'environnement dans le contexte du pipeline
                        env."${key.trim()}" = value.trim()
                    }

                    // Afficher les variables d'environnement pour le débogage
                    env.each { key, value ->
                        echo "${key}=${value}"
                    }

                    env.BRANCH_NAME = "preprod"
                    echo("Branche en cour $env.BRANCH_NAME ")
                    STATUS_STACK = false

                    // les données dockers projet
                    dockers = utilsServeur.docker("${env.DOCKER_IMAGE_NAME}:${env.IMAGE_VERSION}",
                            "${env.DOCKER_IMAGE_NAME}-preprod:${env.IMAGE_VERSION}",
                            "./docker-compose-swarm-preprod.yml",
                            '/usr/bin',
                            '/home/max/docker_home/ms-eureka',
                            env.STACK_NAME)

                    // les données de connection serveur
                    remote = utilsServeur.config(env.BRANCH_NAME,
                            '192.168.1.27',
                            true,
                            22,
                            Preprod_CREDS_USR,
                            Preprod_CREDS_PSW)

                    // les données de connection au dépôt nexus
                    nexus = utilsServeur.credentials(Nexus_CREDS_USR,
                            Nexus_CREDS_PSW,
                            'sonatype-nexus.backhole.ovh')


                    SERVICE_CONFIG_URI = "http://${remote.host}:8089"
                    echo "Nouvelle version de l'application : ${IMAGE_VERSION}";
                }
            }
        }

        stage("Test : service ms-configuration") {
            steps {
                script {
                    echo("Vérifie que le service ms-configuration fonctionne correctement sur le serveur ${env.BRANCH_NAME}")
                    status = false
                    for (int index = 0; index < 10; index++) {

                        echo("Requet CURL n° $index du service : ms-configuration a l'adresse : ${SERVICE_CONFIG_URI}/actuator/health ")
                        String result = sh(script: "curl -s ${SERVICE_CONFIG_URI}/actuator/health | jq -r '.status'"
                                , returnStdout: true, returnStatus: false)

                        echo("result $result")

                        if (result.contains("UP")) {
                            echo("Le service ms-configuration est bien cours d'exécution ")
                            status = "SUCCESS"
                            break
                        } else {
                            echo("Le service ms-configuration n'est pas cours d'exécution ")
                            echo "Tentative n° $index"
                            sleep time: 5, unit: 'SECONDS'
                        }
                    }

                    if (status != "SUCCESS") {
                        error("Le service ms-configuration n'est pas actif !!!")
                    }
                }
            }
        }

        stage("Open connection") {
            steps {
                script {

                    echo("Ouverture de connection au depot nexus sur le serveur ${env.BRANCH_NAME}")
                    utilsDocker.loginDepot(remote, nexus, dockers.binDocker)

                    echo("Mise à jours du projet ms-article sur le serveur ${env.BRANCH_NAME}")
                    String commande = sshCommand remote: remote, failOnError: false, sudo: false,
                            command: "cd ${dockers.pathProjet} && git checkout ${env.BRANCH_NAME} &&  git pull origin ${env.BRANCH_NAME}"

                    echo("sorti : ${commande}")
                }
            }
        }

        // Détermine Update ou deploy
        stage("Status stack : eureka") {
            steps {
                script {
                    echo("Vérifi si la stack ${dockers.stackName} est créer ou mettre à jours ")

                    STATUS_STACK = utilsSwarm.statusStackRemote(remote, dockers.stackName, dockers.bindocker)
                    echo("La stack ${dockers.stackName} sera a " + (STATUS_STACK ? 'mettre à jours' : 'déployée') + ' sur le serveur')
                }
            }
        }


        stage("Maven Compilation") {
            agent {
                docker {
                    image 'maven:3.8.5-jdk-8-slim'
                    args '-v /var/jenkins_home/maven/.m2:/root/.m2' +
                            ' -v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                script {
                    echo("Compilation du service ms-eureka")
                    sh("mvn clean package -Dspring.profiles.active=${env.BRANCH_NAME} -DSERVICE_CONFIG_DOCKER=${SERVICE_CONFIG_URI}")
                }
            }
        }

        stage('Build Docker compose') {
            agent any
            steps {
                script {
                    echo("Création de l'image Docker : ${env.DOCKER_IMAGE_NAME}:${env.IMAGE_VERSION} ")
                    sh("docker compose build --no-cache")
                }
            }
        }

        stage('Push image dépôt') {
            agent any
            steps {
                script {
                    echo("tag de l'image : ${dockers.imgTag}")
                    sh("docker tag ${dockers.img} ${dockers.imgTag}")

                    echo("push de l'image ${dockers.imgTag} vers le dépôt")
                    def pushResult = docker.image("${dockers.imgTag}").push()

                    echo("Sorti push : ${pushResult}")
                }
            }
        }


        stage('Deploy ms-eureka') {
            agent any
            steps {
                script {
                    echo("Pull image and Deploy stack ")
                    utilsSwarm.deployStack(this,remote,dockers)
                }

            }
        }

        // Teste la santer du service (dans la stack)
        stage('Test du service ') {
            agent any
            steps {
                script {
                    status = false
                    for (int index = 0; index < 10; index++) {

                        echo("Requet CURL n° ${index} du service : ${NAME_SERVICE}")
                        echo("à l'adresse : http://${remote.host}:${PORT}/actuator/health ")

                        String result = sh(script: "curl -s http://${remote.host}:${PORT}/actuator/health | jq -r '.status'"
                                , returnStdout: true , returnStatus: false)

                        echo("result : ${result}")

                        if (result.contains("UP")) {
                            echo("La mise en service de ${NAME_SERVICE} à été réalisé avec Succès ")
                            status = "SUCCESS"
                            break
                        } else {
                            echo "Le service n'est pas encore UP. Attente de 15 secondes..."
                            echo "Tentative n° $index"
                            sleep time: 15, unit: 'SECONDS'
                        }
                    }
                    if (status != "SUCCESS") {
                        error("Le service ${NAME_SERVICE} est en echec !!!")
                    }
                }
            }
        }
    }


    post {
        always {
            script {
                echo("Déconnection au dépôt nexus")
                utilsDocker.logoutDepot(remote , nexus.domain, dockers.binDocker)

                echo("Clean des images créer sur devOps : \n ${dockers.img} \n ${dockers.imgTag}")

                utilsDocker.clsImageLocal(dockers.img)
                utilsDocker.clsImageLocal(dockers.imgTag)
            }
        }
        success {
            script {
                echo "Fin " + (STATUS_STACK ? "du déployement de la stack " : "de la mise à jour de la stack ")
            }
        }
        failure {
            script {

                echo('Échec du build ')

                // Si deploiment en echec
                if (!STATUS_STACK) {
                    echo("Delete stack ${dockers.stackName} du serveur distant ")
                    String deleteStack = sshCommand remote: remote, command: "${dockers.binDocker}/docker stack rm ${dockers.stackName}"
                    echo("Sorti delete : ${deleteStack}")

                    // Si mise à jour en echec
                }else {
                    echo('ROLLBACK ...')
                    String rollbackResult = sshCommand remote: remote, command: "docker service rollback ${NAME_SERVICE}"
                    echo("Sorti ROLLBACK : ${rollbackResult}")
                }

                echo "Le temps que la stack soit remove, l'images sera supprimer dans 15 secondes..."
                sleep time: 15, unit: 'SECONDS'
                echo("Delete Images ${dockers.imgTag} du serveur preprod ")
                utilsDocker.clsImageRemote(remote, dockers.imgTag, dockers.binDocker)
            }
        }
    }
}